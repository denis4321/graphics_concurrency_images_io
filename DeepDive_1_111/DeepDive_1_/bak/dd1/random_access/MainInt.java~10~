package dd1.random_access;

import java.awt.BorderLayout;
import java.awt.Dimension;

import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.GridBagLayout;
import java.awt.*;
import javax.swing.JScrollPane;
import javax.swing.JList;
import javax.swing.JButton;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.util.*;
import javax.swing.event.*;
import java.io.*;

public class MainInt extends JFrame {
    JPanel contentPane;
    GridBagLayout gridBagLayout1 = new GridBagLayout();
    JScrollPane jScrollPane1 = new JScrollPane();
    JList MyList = new JList();
    JButton AddBut = new JButton();
    JButton RemoveBut = new JButton();
    MyListModel model;

    public MainInt() {
        try {
            setDefaultCloseOperation(EXIT_ON_CLOSE);
            jbInit();
            model = new MyListModel();
            MyList.setModel(model);
            MyList.setCellRenderer(new DefaultListCellRenderer(){
                public Component getListCellRendererComponent(JList list,
                        Object value, int index, boolean isSelected,
                        boolean cellHasFocus) {
                    Element elem = (Element)value;
                    JLabel lab = (JLabel) super.getListCellRendererComponent(list, "Элемент "+elem.getNum(), index, isSelected, cellHasFocus);
                    if (!isSelected){
                        lab.setBackground(index%2==0 ? Color.white : Color.gray);
                        lab.setForeground(index%2==0 ? Color.black : Color.white);
                    }
                    return lab;
                }
            });
            MyList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }

    /**
     * Component initialization.
     *
     * @throws java.lang.Exception
     */
    private void jbInit() throws Exception {
        contentPane = (JPanel) getContentPane();
        contentPane.setLayout(gridBagLayout1);
        setSize(new Dimension(400, 300));
        setTitle("Frame Title");
        AddBut.setFont(new java.awt.Font("Tahoma", Font.BOLD, 11));
        AddBut.setForeground(Color.blue);
        AddBut.setText("Добавить");
        AddBut.addActionListener(new MainInt_AddBut_actionAdapter(this));
        RemoveBut.setFont(new java.awt.Font("Tahoma", Font.BOLD, 11));
        RemoveBut.setForeground(Color.red);
        RemoveBut.setText("Удалить");
        RemoveBut.addActionListener(new MainInt_RemoveBut_actionAdapter(this));
        contentPane.add(jScrollPane1,
                        new GridBagConstraints(0, 0, 2, 1, 1.0, 1.0
                                               , GridBagConstraints.CENTER,
                                               GridBagConstraints.BOTH,
                                               new Insets(5, 5, 0, 5), 0, 0));
        jScrollPane1.getViewport().add(MyList);
        contentPane.add(AddBut, new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0
                , GridBagConstraints.WEST, GridBagConstraints.NONE,
                new Insets(5, 5, 5, 5), 0, 0));
        contentPane.add(RemoveBut, new GridBagConstraints(1, 1, 1, 1, 0.0, 0.0
                , GridBagConstraints.WEST, GridBagConstraints.NONE,
                new Insets(5, 5, 5, 5), 0, 0));
    }

    public void addElement() {
        try {
            System.out.println("element added");
            for (int i=0; i<1024*1024*1024*10/8; i++){
                model.addElement(new Element());

            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public void removeElement() {
        int index = MyList.getSelectedIndex();
        if (index>=0){
            try {
                model.removeElement(index);
                if (index < model.getSize()) {
                    MyList.setSelectedIndex(index);
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }


}


class MainInt_RemoveBut_actionAdapter implements ActionListener {
    private MainInt adaptee;
    MainInt_RemoveBut_actionAdapter(MainInt adaptee) {
        this.adaptee = adaptee;
    }

    public void actionPerformed(ActionEvent e) {
        adaptee.removeElement();
    }
}


class MainInt_AddBut_actionAdapter implements ActionListener {
    private MainInt adaptee;
    MainInt_AddBut_actionAdapter(MainInt adaptee) {
        this.adaptee = adaptee;
    }

    public void actionPerformed(ActionEvent e) {
        adaptee.addElement();
    }
}
