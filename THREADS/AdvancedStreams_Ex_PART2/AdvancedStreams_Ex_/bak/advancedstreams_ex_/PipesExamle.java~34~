package advancedstreams_ex_;

import java.io.*;

public class PipesExamle {
    public PipesExamle() {
    }

    public static void main(String[] args) {
        try{
            //Замена стандартного ПринтСтрима на свой собственный
            /*PrintStream p = new PrintStream(new FileOutputStream("out.txt"), false);
            System.setOut(p);*/
            //Использование потоков - труб
            final int SIZE = 1000;//Максимальный размер данных для записи, т.к. буфер трубы = 1024, а размер одной записи - 24
            PipedOutputStream pipeOut = new PipedOutputStream();
            PipedInputStream pipeIn = new PipedInputStream(pipeOut);
            PrintStream old = System.out;
            System.setOut(new PrintStream(pipeOut));
            //НЕ ТРОГАТЬ!!!!!
            int count = 0;
            int i=0;
            while (count<SIZE) {
                String txt = "step #" + (i + 1)+/*System.getProperty("line.separator")*/"\n";
                System.out.print(txt);
                count+=txt.length();
                i++;
                //old.println(count);
            }
            //--------------
            System.setOut(old);
            System.out.println("--------------------------------------");
            System.out.println("PipedInputStream supports mark/reset: "+pipeIn.markSupported());
            BufferedInputStream in = new BufferedInputStream(pipeIn, 1024);//Установка бкферизирующего потока
            System.out.println("BufferedInputStream supports mark/reset: "+in.markSupported());
            //Запись в консоль
            in.mark(2048);
            while (in.available()>0){
                System.out.write(in.read());
            }
            //Запись в файл
            in.reset();
            FileOutputStream fOut = new FileOutputStream("out.txt");
            while (in.available()>0){
                fOut.write(in.read());
            }
            in.close();
            pipeOut.close();
        } catch (Exception ex){
            ex.printStackTrace(System.out);
        }
    }
}

